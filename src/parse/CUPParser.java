
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.*;
import source.*;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.Operator;
import syms.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CUPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CUPToken.class;
}

  /** Default constructor. */
  @Deprecated
  public CUPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\041\002\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\006\003\000\002" +
    "\006\004\000\002\007\006\000\002\007\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\004\000\002\012\006\000" +
    "\002\012\003\000\002\013\003\000\002\013\007\000\002" +
    "\014\003\000\002\014\003\000\002\015\003\000\002\015" +
    "\004\000\002\016\006\000\002\016\003\000\002\017\006" +
    "\000\002\020\007\000\002\020\005\000\002\021\002\000" +
    "\002\025\005\000\002\023\003\000\002\023\005\000\002" +
    "\024\006\000\002\024\010\000\002\024\003\000\002\024" +
    "\004\000\002\024\004\000\002\024\005\000\002\024\007" +
    "\000\002\024\003\000\002\026\006\000\002\022\002\000" +
    "\002\040\003\000\002\040\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\031\003\000\002\031\005\000" +
    "\002\035\003\000\002\035\003\000\002\032\003\000\002" +
    "\032\005\000\002\036\003\000\002\036\003\000\002\033" +
    "\004\000\002\033\004\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\016\003\005\027\001\031\001\036\001\041" +
    "\001\042\001\001\002\000\004\002\174\001\002\000\004" +
    "\002\ufffe\001\002\000\014\027\ufffa\031\ufffa\036\ufffa\041" +
    "\ufffa\042\ufffa\001\002\000\004\002\000\001\002\000\014" +
    "\027\020\031\021\036\011\041\017\042\013\001\002\000" +
    "\004\050\167\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\006\003\160\050\162\001\002\000\014\027\ufffc\031" +
    "\ufffc\036\ufffc\041\ufffc\042\ufffc\001\002\000\014\027\ufffb" +
    "\031\ufffb\036\ufffb\041\ufffb\042\ufffb\001\002\000\004\013" +
    "\154\001\002\000\006\003\134\050\135\001\002\000\022" +
    "\003\046\027\020\030\040\035\051\037\042\043\037\044" +
    "\045\050\047\001\002\000\006\003\022\050\024\001\002" +
    "\000\020\003\ufff3\027\ufff3\031\ufff3\036\ufff3\041\ufff3\042" +
    "\ufff3\050\ufff3\001\002\000\020\003\022\027\ufff9\031\ufff9" +
    "\036\ufff9\041\ufff9\042\ufff9\050\024\001\002\000\004\013" +
    "\026\001\002\000\020\003\ufff6\027\ufff6\031\ufff6\036\ufff6" +
    "\041\ufff6\042\ufff6\050\ufff6\001\002\000\012\003\027\010" +
    "\032\050\031\051\030\001\002\000\010\004\uffef\021\uffef" +
    "\026\uffef\001\002\000\010\004\ufff2\021\ufff2\026\ufff2\001" +
    "\002\000\010\004\ufff0\021\ufff0\026\ufff0\001\002\000\012" +
    "\003\027\010\032\050\031\051\030\001\002\000\004\004" +
    "\034\001\002\000\020\003\ufff4\027\ufff4\031\ufff4\036\ufff4" +
    "\041\ufff4\042\ufff4\050\ufff4\001\002\000\010\004\ufff1\021" +
    "\ufff1\026\ufff1\001\002\000\020\003\ufff5\027\ufff5\031\ufff5" +
    "\036\ufff5\041\ufff5\042\ufff5\050\ufff5\001\002\000\016\003" +
    "\061\007\057\010\052\023\064\050\047\051\054\001\002" +
    "\000\004\050\125\001\002\000\010\004\uffd9\033\uffd9\034" +
    "\uffd9\001\002\000\006\003\061\050\047\001\002\000\006" +
    "\004\121\034\122\001\002\000\006\004\uffdd\034\uffdd\001" +
    "\002\000\016\003\061\007\057\010\052\023\064\050\047" +
    "\051\054\001\002\000\012\004\uffd4\006\uffd0\033\uffd4\034" +
    "\uffd4\001\002\000\044\004\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\024\uffd1\032\uffd1\033\uffd1\034\uffd1\040\uffd1" +
    "\001\002\000\004\006\116\001\002\000\016\003\061\007" +
    "\057\010\052\023\064\050\047\051\054\001\002\000\016" +
    "\003\uffb9\007\uffb9\010\uffb9\023\uffb9\050\uffb9\051\uffb9\001" +
    "\002\000\016\004\uffcf\024\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\040\uffcf\001\002\000\042\004\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\024\uffbb\032\uffbb\033\uffbb\034\uffbb\040\uffbb\001" +
    "\002\000\036\004\uffce\007\106\010\102\013\113\014\104" +
    "\015\103\016\107\017\111\020\105\024\uffce\032\uffce\033" +
    "\uffce\034\uffce\040\uffce\001\002\000\004\040\076\001\002" +
    "\000\016\003\061\007\057\010\052\023\064\050\047\051" +
    "\054\001\002\000\042\004\uffc6\007\uffc6\010\uffc6\011\072" +
    "\012\071\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\024\uffc6\032\uffc6\033\uffc6\034\uffc6\040\uffc6\001\002" +
    "\000\042\004\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\024\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\040\uffd0\001\002\000\042\004" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\024\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\040\uffc2\001\002\000\016\003\061\007\057" +
    "\010\052\023\064\050\047\051\054\001\002\000\016\003" +
    "\061\007\057\010\052\023\064\050\047\051\054\001\002" +
    "\000\042\004\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\024\uffba" +
    "\032\uffba\033\uffba\034\uffba\040\uffba\001\002\000\004\024" +
    "\067\001\002\000\042\004\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\024\uffbc\032\uffbc\033\uffbc\034\uffbc\040\uffbc\001\002" +
    "\000\042\004\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\024\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\040\uffbd\001\002\000\016\003" +
    "\uffbf\007\uffbf\010\uffbf\023\uffbf\050\uffbf\051\uffbf\001\002" +
    "\000\016\003\uffc0\007\uffc0\010\uffc0\023\uffc0\050\uffc0\051" +
    "\uffc0\001\002\000\016\003\061\007\057\010\052\023\064" +
    "\050\047\051\054\001\002\000\042\004\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\024\uffc1\032\uffc1\033\uffc1\034\uffc1\040" +
    "\uffc1\001\002\000\042\004\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\024\uffbe\032\uffbe\033\uffbe\034\uffbe\040\uffbe\001\002" +
    "\000\022\003\046\027\020\030\040\035\051\037\042\043" +
    "\037\044\045\050\047\001\002\000\004\033\100\001\002" +
    "\000\022\003\046\027\020\030\040\035\051\037\042\043" +
    "\037\044\045\050\047\001\002\000\010\004\uffda\033\uffda" +
    "\034\uffda\001\002\000\016\003\uffc3\007\uffc3\010\uffc3\023" +
    "\uffc3\050\uffc3\051\uffc3\001\002\000\016\003\uffca\007\uffca" +
    "\010\uffca\023\uffca\050\uffca\051\uffca\001\002\000\016\003" +
    "\uffcb\007\uffcb\010\uffcb\023\uffcb\050\uffcb\051\uffcb\001\002" +
    "\000\016\003\uffc8\007\uffc8\010\uffc8\023\uffc8\050\uffc8\051" +
    "\uffc8\001\002\000\016\003\uffc4\007\uffc4\010\uffc4\023\uffc4" +
    "\050\uffc4\051\uffc4\001\002\000\016\003\uffc7\007\uffc7\010" +
    "\uffc7\023\uffc7\050\uffc7\051\uffc7\001\002\000\016\003\061" +
    "\007\057\010\052\023\064\050\047\051\054\001\002\000" +
    "\016\003\uffc9\007\uffc9\010\uffc9\023\uffc9\050\uffc9\051\uffc9" +
    "\001\002\000\016\003\061\007\057\010\052\023\064\050" +
    "\047\051\054\001\002\000\016\003\uffcc\007\uffcc\010\uffcc" +
    "\023\uffcc\050\uffcc\051\uffcc\001\002\000\022\004\uffcd\007" +
    "\106\010\102\024\uffcd\032\uffcd\033\uffcd\034\uffcd\040\uffcd" +
    "\001\002\000\042\004\uffc5\007\uffc5\010\uffc5\011\072\012" +
    "\071\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\024\uffc5\032\uffc5\033\uffc5\034\uffc5\040\uffc5\001\002\000" +
    "\016\003\061\007\057\010\052\023\064\050\047\051\054" +
    "\001\002\000\010\004\uffd6\033\uffd6\034\uffd6\001\002\000" +
    "\014\004\uffd7\007\106\010\102\033\uffd7\034\uffd7\001\002" +
    "\000\022\003\046\027\020\030\040\035\051\037\042\043" +
    "\037\044\045\050\047\001\002\000\012\002\uffde\004\uffde" +
    "\033\uffde\034\uffde\001\002\000\006\004\uffdc\034\uffdc\001" +
    "\002\000\010\004\uffd8\033\uffd8\034\uffd8\001\002\000\004" +
    "\023\126\001\002\000\004\024\uffd2\001\002\000\004\024" +
    "\130\001\002\000\010\004\uffd5\033\uffd5\034\uffd5\001\002" +
    "\000\004\032\132\001\002\000\022\003\046\027\020\030" +
    "\040\035\051\037\042\043\037\044\045\050\047\001\002" +
    "\000\010\004\uffdb\033\uffdb\034\uffdb\001\002\000\020\003" +
    "\uffeb\027\uffeb\031\uffeb\036\uffeb\041\uffeb\042\uffeb\050\uffeb" +
    "\001\002\000\004\013\141\001\002\000\020\003\uffee\027" +
    "\uffee\031\uffee\036\uffee\041\uffee\042\uffee\050\uffee\001\002" +
    "\000\020\003\134\027\ufff8\031\ufff8\036\ufff8\041\ufff8\042" +
    "\ufff8\050\135\001\002\000\020\003\uffed\027\uffed\031\uffed" +
    "\036\uffed\041\uffed\042\uffed\050\uffed\001\002\000\010\003" +
    "\143\025\146\050\144\001\002\000\004\004\153\001\002" +
    "\000\004\004\uffe7\001\002\000\004\004\uffe8\001\002\000" +
    "\004\004\uffea\001\002\000\012\003\027\010\032\050\031" +
    "\051\030\001\002\000\004\021\150\001\002\000\012\003" +
    "\027\010\032\050\031\051\030\001\002\000\004\026\152" +
    "\001\002\000\004\004\uffe9\001\002\000\020\003\uffec\027" +
    "\uffec\031\uffec\036\uffec\041\uffec\042\uffec\050\uffec\001\002" +
    "\000\014\027\ufffa\031\ufffa\036\ufffa\041\ufffa\042\ufffa\001" +
    "\002\000\004\004\156\001\002\000\014\027\uffe2\031\uffe2" +
    "\036\uffe2\041\uffe2\042\uffe2\001\002\000\020\003\160\027" +
    "\ufff7\031\ufff7\036\ufff7\041\ufff7\042\ufff7\050\162\001\002" +
    "\000\020\003\uffe3\027\uffe3\031\uffe3\036\uffe3\041\uffe3\042" +
    "\uffe3\050\uffe3\001\002\000\020\003\uffe6\027\uffe6\031\uffe6" +
    "\036\uffe6\041\uffe6\042\uffe6\050\uffe6\001\002\000\004\005" +
    "\163\001\002\000\006\003\143\050\144\001\002\000\004" +
    "\004\165\001\002\000\020\003\uffe4\027\uffe4\031\uffe4\036" +
    "\uffe4\041\uffe4\042\uffe4\050\uffe4\001\002\000\020\003\uffe5" +
    "\027\uffe5\031\uffe5\036\uffe5\041\uffe5\042\uffe5\050\uffe5\001" +
    "\002\000\006\003\170\023\171\001\002\000\004\013\uffe0" +
    "\001\002\000\004\024\uffdf\001\002\000\004\024\173\001" +
    "\002\000\004\013\uffe1\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\002\003\041\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\006\004\007\001\001" +
    "\000\002\001\001\000\012\005\014\017\013\020\015\025" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\156\016\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\136\012\135\001\001" +
    "\000\012\023\042\024\043\025\040\040\047\001\001\000" +
    "\006\006\022\007\024\001\001\000\002\001\001\000\004" +
    "\007\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\027\130\030\052\031\054\032\057\033\061\037" +
    "\062\040\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\117\032\057\033\061\037\062\040\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\027\055\030\052\031\054\032\057\033\061" +
    "\037\062\040\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\111\035\107\001\001" +
    "\000\002\001\001\000\010\033\074\037\062\040\064\001" +
    "\001\000\004\036\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\067\037\062\040\064\001\001\000" +
    "\020\027\065\030\052\031\054\032\057\033\061\037\062" +
    "\040\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\073\037\062\040\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\076\025\040" +
    "\040\047\001\001\000\002\001\001\000\010\024\100\025" +
    "\040\040\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\114\033\061" +
    "\037\062\040\064\001\001\000\002\001\001\000\014\031" +
    "\113\032\057\033\061\037\062\040\064\001\001\000\002" +
    "\001\001\000\004\035\107\001\001\000\004\036\072\001" +
    "\001\000\020\027\116\030\052\031\054\032\057\033\061" +
    "\037\062\040\064\001\001\000\002\001\001\000\004\035" +
    "\107\001\001\000\010\024\122\025\040\040\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\132\025" +
    "\040\040\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\137\001" +
    "\001\000\002\001\001\000\006\013\141\014\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\146\001\001\000\002\001\001" +
    "\000\004\010\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\154\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /* This section provides some methods used by Java CUP during parsing.
     * They override its default methods for reporting syntax errors. */
        
    /* Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /* Override the default CUP syntax_error method with one
     * that integrates better with the compiler's error reporting. */
    @Override
    public void syntax_error(Symbol cur_token) {
        errors.error("PL0 syntax error", ((ComplexSymbol) cur_token).xleft);
    }
    /* Override the default CUP unrecovered_syntax_error method with one
     * that integrates better with the compiler's error reporting. */
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        errors.error("PL0 unrecovered syntax error", 
                        ((ComplexSymbol) cur_token).xleft);
    }
            


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CUPParser$actions {

  /* This section provides global variables and methods used in the
     * semantics actions associated with parsing rules.
     * These are the only global variables you should need. */

    /* Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /* The current symbol table scope is available globally in the parser.
     *  Its current scope corresponds to the procedure (or main program)
     *  being processed.
     */
    private Scope currentScope;


  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action_part00000000(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              DeclNode.ProcedureNode RESULT =null;

            /* This action occurs before the whole program is recognised.
             * It constructs the initial symbol table with current scope the
             * predefined scope. */
            currentScope = new SymbolTable().getPredefinedScope();
            /* Set up a dummy symbol table entry for the main program */
            SymEntry.ProcedureEntry procMain = 
                currentScope.addProcedure("<main>", ErrorHandler.NO_LOCATION);
            if(procMain  == null) {
                errors.fatal("Could not add main program to symbol table",
                        ErrorHandler.NO_LOCATION);
            }
            /* Enter the scope for the main program and save the new local
             * scope in main's symbol table entry */
            currentScope = currentScope.newScope(procMain);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 Block 
            {
              DeclNode.ProcedureNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (DeclNode.ProcedureNode) ((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode.BlockNode block = (StatementNode.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            /* This action is executed after the whole program
             * has been recognised */
            /* Returned result of the whole parsing phase */
            RESULT = new DeclNode.ProcedureNode(currentScope.getOwnerEntry(), block);
            /* Exit the current scope */
            currentScope = currentScope.getParent();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.ProcedureNode start_val = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= error 
            {
              DeclNode.ProcedureNode RESULT =null;
		
            /* A null result from Program will cause the compiler to
             * avoid further processing. */
            RESULT = null;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= DeclarationList CompoundStatement 
            {
              StatementNode.BlockNode RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode b = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new StatementNode.BlockNode(bxleft, dl, b, currentScope);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= DeclarationList ProcedureDef 
            {
              DeclNode.DeclListNode RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		DeclNode.ProcedureNode p = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            /* Add a procedure declaration to the list of declarations */
            dl.addDeclaration(p);
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationList ::= DeclarationList Declaration 
            {
              DeclNode.DeclListNode RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* A non-procedure declaration is not added to the list
             * but added to the symbol table during its parsing. */
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= 
            {
              DeclNode.DeclListNode RESULT =null;
		
            RESULT = new DeclNode.DeclListNode();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= KW_CONST ConstDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= KW_TYPE TypeDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= KW_VAR VarDeclSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDefSeq ::= ConstDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDefSeq ::= ConstDefSeq ConstDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDef ::= IDENTIFIER EQUALS Constant SEMICOLON 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* The attribute idxleft represents the location of the first
             * character of the IDENTIFIER token in the input stream.
             * addConstant returns null if id is already defined 
             * in the current scope */
            if(currentScope.addConstant(id, idxleft, c) == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constant ::= NUMBER 
            {
              ConstExp RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NumberNode(nxleft, Predefined.INTEGER_TYPE, n);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= MINUS Constant 
            {
              ConstExp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NegateNode(opxleft, c);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= IDENTIFIER 
            {
              ConstExp RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.ConstIdNode(idxleft, id, currentScope);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constant ::= error 
            {
              ConstExp RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ConstExp.ErrorNode(errxleft);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDefSeq ::= TypeDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDefSeq ::= TypeDefSeq TypeDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDef ::= IDENTIFIER EQUALS Type SEMICOLON 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            SymEntry.TypeEntry entry = currentScope.addType(id, idxleft, type);
            if(entry == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= TypeIdentifier 
            {
              Type RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= LBRACKET Constant RANGE Constant RBRACKET 
            {
              Type RESULT =null;
		Location subrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xleft;
		Location subrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xright;
		Object subr = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		Location loxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location loxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		ConstExp lo = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location hixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location hixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		ConstExp hi = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = new Type.SubrangeType(subrxleft, lo, hi);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TypeIdentifier ::= IDENTIFIER 
            {
              Type RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 /* As the type identifier may not be defined at this point.
            * IdRefType records the id, as well as the symbol table scope
            * to look it up during type resolution in the static checker.
            */
            RESULT = new Type.IdRefType(idxleft, id, currentScope);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeIdentifier ::= error 
            {
              Type RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = Type.ERROR_TYPE;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDeclSeq ::= VarDecl 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDeclSeq ::= VarDeclSeq VarDecl 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDecl ::= IDENTIFIER COLON TypeIdentifier SEMICOLON 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            // Variables are always of ReferenceType.
            if(currentScope.addVariable(id, idxleft, type) == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDecl ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ProcedureDef ::= ProcedureHead EQUALS Block SEMICOLON 
            {
              DeclNode.ProcedureNode RESULT =null;
		Location procEntryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location procEntryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		SymEntry.ProcedureEntry procEntry = (SymEntry.ProcedureEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		StatementNode.BlockNode b = (StatementNode.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* Executed after recognising the whole procedure.
             * Exit the scope created during the parsing action
             * for ProcedureHead. */
            currentScope = currentScope.getParent();
            RESULT = new DeclNode.ProcedureNode(procEntry, b);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureDef",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER LPAREN FormalParamList RPAREN 
            {
              SymEntry.ProcedureEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* Add an entry for the procedure to the current scope */
            SymEntry.ProcedureEntry procEntry = currentScope.addProcedure(id, idxleft);
            if(procEntry == null) {
                errors.error(id + " already declared in this scope", idxleft);
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't added to the symbol table
                 * but the RESULT attribute of ProcedureHead must return a
                 * ProcedureEntry. */
                procEntry = new SymEntry.ProcedureEntry(id, idxleft);
                procEntry.setScope(currentScope);
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            currentScope = currentScope.newScope(procEntry);
            RESULT = procEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER error 
            {
              SymEntry.ProcedureEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* On a syntax error in a procedure head a dummy ProcedureEntry is
             * returned and a new scope created to allow the parsing of the
             * block body of the procedure to be processed in the new scope.
             */
            SymEntry.ProcedureEntry procEntry = 
                new SymEntry.ProcedureEntry(id, idxleft);
            procEntry.setScope(currentScope);
            currentScope = currentScope.newScope(procEntry);
            RESULT = procEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalParamList ::= 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CompoundStatement ::= KW_BEGIN StatementList KW_END 
            {
              StatementNode RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = new StatementNode.ListNode(slxleft,sl);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StatementList ::= Statement 
            {
              List<StatementNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ArrayList<StatementNode>();
            RESULT.add(s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatementList ::= StatementList SEMICOLON Statement 
            {
              List<StatementNode> RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            sl.add(s);
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= KW_WHILE Condition KW_DO Statement 
            {
              StatementNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WhileNode(cxleft, c, s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= KW_IF Condition KW_THEN Statement KW_ELSE Statement 
            {
              StatementNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xright;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.IfNode(cxleft, c, s1, s2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= CompoundStatement 
            {
              StatementNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = s; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= KW_READ LValue 
            {
              StatementNode RESULT =null;
		Location lvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location lvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.ReadNode(lvalxleft, lval);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= KW_WRITE Exp 
            {
              StatementNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WriteNode(exleft, e);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= LValue ASSIGN Condition 
            {
              StatementNode RESULT =null;
		Location lvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location lvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location rvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location rvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode rval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
          RESULT = new StatementNode.AssignmentNode(lvalxleft, lval, rval);
       
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= KW_CALL IDENTIFIER LPAREN ActualParamList RPAREN 
            {
              StatementNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new StatementNode.CallNode(idxleft, id);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= error 
            {
              StatementNode RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.ErrorNode(locxleft);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RepeatStatement ::= KW_REPEAT StatementList KW_UNTIL Condition 
            {
              StatementNode RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new StatementNode.RepeatNode(slxleft, sl, c);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RepeatStatement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ActualParamList ::= 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LValue ::= IDENTIFIER 
            {
              ExpNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            /* At this stage the identifier could be either a constant identifier or 
             * a variable identifier but which cannot be determined until static 
             * checking when the IdentifierNode will be transformed into either
             * a ConstNode or a VariableNode or detected as invalid.
             */
            RESULT = new ExpNode.IdentifierNode(idxleft, id);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LValue ::= error 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ErrorNode(exleft);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Condition ::= RelCondition 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Condition",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelCondition ::= Exp 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelCondition ::= Exp Relation Exp 
            {
              ExpNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Relation ::= EQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.EQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Relation ::= NEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.NEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Relation ::= LEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.LEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Relation ::= LESS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.LESS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Relation ::= GREATER 
            {
              Operator RESULT =null;
		
            RESULT = Operator.GREATER_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Relation ::= GEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.GEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp ::= Term 
            {
              ExpNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = t;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp ::= Exp AddOp Term 
            {
              ExpNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AddOp ::= PLUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.ADD_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AddOp ::= MINUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.SUB_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Term ::= Factor 
            {
              ExpNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode f = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = f;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Term ::= Term MulOp Factor 
            {
              ExpNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MulOp ::= TIMES 
            {
              Operator RESULT =null;
		
            RESULT = Operator.MUL_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MulOp ::= DIVIDE 
            {
              Operator RESULT =null;
		
            RESULT = Operator.DIV_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Factor ::= PLUS Factor 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Factor ::= UnaryOperator Factor 
            {
              ExpNode RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.UnaryNode(opxleft, op, e);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Factor ::= LPAREN Condition RPAREN 
            {
              ExpNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = c;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Factor ::= NUMBER 
            {
              ExpNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ConstNode(nxleft, 
                    Predefined.INTEGER_TYPE, n);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Factor ::= LValue 
            {
              ExpNode RESULT =null;
		Location lvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location lvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = lval;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UnaryOperator ::= MINUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.NEG_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CUPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
              return CUP$CUPParser$do_action_part00000000(
                               CUP$CUPParser$act_num,
                               CUP$CUPParser$parser,
                               CUP$CUPParser$stack,
                               CUP$CUPParser$top);
    }
}

}
